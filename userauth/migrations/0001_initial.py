# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-08-29 08:00
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('userperm', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mfa', models.CharField(blank=True, max_length=250, null=True, verbose_name='MFA密钥')),
                ('qq', models.CharField(blank=True, max_length=16, validators=[django.core.validators.RegexValidator(message='请输入正确的QQ号', regex='^[^0]\\d{4,15}$')], verbose_name='QQ')),
                ('mobile', models.CharField(blank=True, error_messages={'required': '联系电话不能为空'}, max_length=30, validators=[django.core.validators.RegexValidator(code='号码错误', message='请输入正确的电话或手机号码', regex='^[^0]\\d{6,7}$|^[1]\\d{10}$')], verbose_name='联系电话')),
                ('position', models.CharField(blank=True, max_length=20, verbose_name='职位')),
                ('role', models.CharField(choices=[('SU', '超级管理员'), ('GA', '组管理员'), ('CU', '普通用户')], default='CU', max_length=2)),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户管理',
                'permissions': (('view_user', '查看用户'), ('edit_user', '管理用户')),
                'default_permissions': (),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': '管理员组',
                'verbose_name_plural': '管理员组管理',
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('deptname', models.CharField(max_length=20, verbose_name='部门')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='部门级别')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='department_children', to='userauth.Department', verbose_name='上级部门')),
            ],
            options={
                'verbose_name': '部门',
                'verbose_name_plural': '部门管理',
                'permissions': (('view_department', '查看部门'), ('edit_department', '管理部门')),
                'default_permissions': (),
            },
            bases=('auth.group',),
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('group_name', models.CharField(max_length=80, unique=True, verbose_name='用户组')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('command', models.ManyToManyField(related_name='group_command_set', to='userperm.UserCommand', verbose_name='用户组命令')),
                ('directory', models.ManyToManyField(related_name='group_directory_set', to='userperm.UserDirectory', verbose_name='用户组目录')),
            ],
            options={
                'verbose_name': '用户组',
                'verbose_name_plural': '用户组管理',
                'default_permissions': (),
            },
            bases=('auth.group',),
        ),
        migrations.AddField(
            model_name='admingroup',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='userauth.UserGroup'),
        ),
        migrations.AddField(
            model_name='admingroup',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='group',
            field=models.ManyToManyField(related_name='user_group_set', to='userauth.UserGroup', verbose_name='用户属组'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
